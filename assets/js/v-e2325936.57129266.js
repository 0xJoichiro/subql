(self.webpackChunksubql_mono=self.webpackChunksubql_mono||[]).push([[512],{914:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-e2325936",path:"/create/mapping.html",title:"Mapping",lang:"English",frontmatter:{},excerpt:"",headers:[{level:2,title:"Block Handler",slug:"block-handler",children:[]},{level:2,title:"Event Handler",slug:"event-handler",children:[]},{level:2,title:"Call Handler",slug:"call-handler",children:[]},{level:2,title:"Query States",slug:"query-states",children:[]},{level:2,title:"RPC calls",slug:"rpc-calls",children:[]},{level:2,title:"Modules and Libraries",slug:"modules-and-libraries",children:[{level:3,title:"Built-in modules",slug:"built-in-modules",children:[]},{level:3,title:"Third-party libraries",slug:"third-party-libraries",children:[]}]},{level:2,title:"Custom Substrate Chains",slug:"custom-substrate-chains",children:[{level:3,title:"Preparation",slug:"preparation",children:[{level:4,title:"Metadata",slug:"metadata",children:[]},{level:4,title:"Type definitions",slug:"type-definitions",children:[]},{level:4,title:"Packages",slug:"packages",children:[]}]},{level:3,title:"Type generation",slug:"type-generation",children:[]},{level:3,title:"Usage",slug:"usage",children:[]}]}],filePathRelative:"create/mapping.md",git:{updatedTime:1623493577e3,contributors:[]}}},5119:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>ds});var e=a(6252);const t=(0,e.uE)('<h1 id="mapping"><a class="header-anchor" href="#mapping">#</a> Mapping</h1><p>Mapping functions define how chain data is transformed into the optimised GraphQL entities that we have previously defined in the <code>schema.graphql</code> file.</p><p>Mappings are written in a subset of TypeScript called AssemblyScript which can be compiled to WASM (WebAssembly).</p><ul><li>Mappings are defined in the <code>src/mappings</code> directory and are exported as a function</li><li>These mappings are also exported in <code>src/index.ts</code></li><li>The mappings files are reference in <code>project.yaml</code> under the mapping handlers.</li></ul><p>There are three classes of mappings functions; <a href="#block-handler">Block handlers</a>, <a href="#event-handler">Event Handlers</a> and <a href="#call-handler">Call Handlers</a>.</p><h2 id="block-handler"><a class="header-anchor" href="#block-handler">#</a> Block Handler</h2><p>You can use block handlers to capture information each time a new block is attached to the Substrate chain, e.g. block number. To achieve this, a defined BlockHandler will be called once for every block.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>SubstrateBlock<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@subql/types&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleBlock</span><span class="token punctuation">(</span>block<span class="token operator">:</span> SubstrateBlock<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Create a new StarterEntity with the block hash as it&#39;s ID</span>\n    <span class="token keyword">const</span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">starterEntity</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>block<span class="token punctuation">.</span>header<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    record<span class="token punctuation">.</span>field1 <span class="token operator">=</span> block<span class="token punctuation">.</span>block<span class="token punctuation">.</span>header<span class="token punctuation">.</span><span class="token builtin">number</span><span class="token punctuation">.</span><span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> record<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',8),p=(0,e.Uk)("A "),o={href:"https://github.com/OnFinality-io/subql/blob/a5ab06526dcffe5912206973583669c7f5b9fdc9/packages/types/src/interfaces.ts#L16",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("SubstrateBlock"),c=(0,e.Uk)(" is an extended interface type of "),r={href:"https://polkadot.js.org/docs/api/cookbook/blocks/",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("signedBlock"),u=(0,e.Uk)(", but also includes the "),k=(0,e.Wm)("code",null,"specVersion",-1),d=(0,e.Uk)(" and "),m=(0,e.Wm)("code",null,"timestamp",-1),b=(0,e.Uk)("."),h=(0,e.Wm)("h2",{id:"event-handler"},[(0,e.Wm)("a",{class:"header-anchor",href:"#event-handler"},"#"),(0,e.Uk)(" Event Handler")],-1),g=(0,e.Wm)("p",null,"You can use event handlers to capture information when certain events are included on a new block. The events that are part of the default Substrate runtime and a block may contain multiple events.",-1),y=(0,e.Uk)("During the processing, the event handler will receive a substrate event as an argument with the event's typed inputs and outputs. Any type of events will trigger the mapping, allowing activity with the data source to be captured. You should use "),f=(0,e.Uk)("Mapping Filters"),w=(0,e.Uk)(" in your manifest to filter events to reduce the time it takes to index data and improve mapping performance."),v=(0,e.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>SubstrateEvent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@subql/types&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span>event<span class="token operator">:</span> SubstrateEvent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span>event<span class="token operator">:</span> <span class="token punctuation">{</span>data<span class="token operator">:</span> <span class="token punctuation">[</span>account<span class="token punctuation">,</span> balance<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">;</span>\n    <span class="token comment">// Retrieve the record by its ID</span>\n    <span class="token keyword">const</span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">starterEntity</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>extrinsic<span class="token punctuation">.</span>block<span class="token punctuation">.</span>block<span class="token punctuation">.</span>header<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    record<span class="token punctuation">.</span>field2 <span class="token operator">=</span> account<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    record<span class="token punctuation">.</span>field3 <span class="token operator">=</span> <span class="token punctuation">(</span>balance <span class="token keyword">as</span> Balance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBigInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> record<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',1),q=(0,e.Uk)("A "),x={href:"https://github.com/OnFinality-io/subql/blob/a5ab06526dcffe5912206973583669c7f5b9fdc9/packages/types/src/interfaces.ts#L30",target:"_blank",rel:"noopener noreferrer"},W=(0,e.Uk)("SubstrateEvent"),U=(0,e.Uk)(" is an extended interface type of the "),S={href:"https://github.com/polkadot-js/api/blob/f0ce53f5a5e1e5a77cc01bf7f9ddb7fcf8546d11/packages/types/src/interfaces/system/types.ts#L149",target:"_blank",rel:"noopener noreferrer"},P=(0,e.Uk)("EventRecord"),j=(0,e.Uk)(". Besides the event data, it also includes an "),I=(0,e.Wm)("code",null,"id",-1),E=(0,e.Uk)(" (the block to which this event belongs) and the extrinsic inside of this block."),C=(0,e.uE)('<h2 id="call-handler"><a class="header-anchor" href="#call-handler">#</a> Call Handler</h2><p>Call handlers are used when you want to capture information on certain substrate extrinsics.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleCall</span><span class="token punctuation">(</span>extrinsic<span class="token operator">:</span> SubstrateExtrinsic<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">starterEntity</span><span class="token punctuation">(</span>extrinsic<span class="token punctuation">.</span>block<span class="token punctuation">.</span>block<span class="token punctuation">.</span>header<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    record<span class="token punctuation">.</span>field4 <span class="token operator">=</span> extrinsic<span class="token punctuation">.</span>block<span class="token punctuation">.</span>timestamp<span class="token punctuation">;</span>\n    <span class="token keyword">await</span> record<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',3),_=(0,e.Uk)("The "),A={href:"https://github.com/OnFinality-io/subql/blob/a5ab06526dcffe5912206973583669c7f5b9fdc9/packages/types/src/interfaces.ts#L21",target:"_blank",rel:"noopener noreferrer"},T=(0,e.Uk)("SubstrateExtrinsic"),B=(0,e.Uk)(" extends "),H={href:"https://github.com/polkadot-js/api/blob/a9c9fb5769dec7ada8612d6068cf69de04aa15ed/packages/types/src/extrinsic/Extrinsic.ts#L170",target:"_blank",rel:"noopener noreferrer"},M=(0,e.Uk)("GenericExtrinsic"),K=(0,e.Uk)(". It is assigned an "),R=(0,e.Wm)("code",null,"id",-1),O=(0,e.Uk)(" (the block to which this extrinsic belongs) and provide an extrinsic property which extends the events among this block. Additionally it records the success status of this extrinsic."),L=(0,e.Wm)("h2",{id:"query-states"},[(0,e.Wm)("a",{class:"header-anchor",href:"#query-states"},"#"),(0,e.Uk)(" Query States")],-1),N=(0,e.Wm)("p",null,"Our goal is to cover all data sources for users for mapping handlers (more than just the three interface event types above). Therefore, we have exposed some of the @polkadot/api interfaces to increase capabilities.",-1),G=(0,e.Wm)("p",null,"These are the interface we currently support:",-1),F={href:"https://polkadot.js.org/docs/api/start/api.query",target:"_blank",rel:"noopener noreferrer"},D=(0,e.Uk)("api.query.<module>.<method>()"),J=(0,e.Uk)(" will query the "),Q=(0,e.Wm)("strong",null,"current",-1),Y=(0,e.Uk)(" block."),z={href:"https://polkadot.js.org/docs/api/start/api.query.multi/#multi-queries-same-type",target:"_blank",rel:"noopener noreferrer"},V=(0,e.Uk)("api.query.<module>.<method>.multi()"),$=(0,e.Uk)(" will make multiple queries of the "),X=(0,e.Wm)("strong",null,"same",-1),Z=(0,e.Uk)(" type at the current block."),nn={href:"https://polkadot.js.org/docs/api/start/api.query.multi/#multi-queries-distinct-types",target:"_blank",rel:"noopener noreferrer"},sn=(0,e.Uk)("api.queryMulti()"),an=(0,e.Uk)(" will make multiple queries of "),en=(0,e.Wm)("strong",null,"different",-1),tn=(0,e.Uk)(" types at the current block."),pn=(0,e.uE)("<p>These are the interface we do <strong>NOT</strong> support currently:</p><ul><li><s>api.tx.*</s></li><li><s>api.derive.*</s></li><li><s>api.query.&lt;module&gt;.&lt;method&gt;.at</s></li><li><s>api.query.&lt;module&gt;.&lt;method&gt;.entriesAt</s></li><li><s>api.query.&lt;module&gt;.&lt;method&gt;.entriesPaged</s></li><li><s>api.query.&lt;module&gt;.&lt;method&gt;.hash</s></li><li><s>api.query.&lt;module&gt;.&lt;method&gt;.keysAt</s></li><li><s>api.query.&lt;module&gt;.&lt;method&gt;.keysPaged</s></li><li><s>api.query.&lt;module&gt;.&lt;method&gt;.range</s></li><li><s>api.query.&lt;module&gt;.&lt;method&gt;.sizeAt</s></li></ul>",2),on=(0,e.Uk)("See an example of using this API in our "),ln={href:"https://github.com/subquery/subql-examples/tree/main/validator-threshold",target:"_blank",rel:"noopener noreferrer"},cn=(0,e.Uk)("validator-threshold"),rn=(0,e.Uk)(" example use case."),un=(0,e.Wm)("h2",{id:"rpc-calls"},[(0,e.Wm)("a",{class:"header-anchor",href:"#rpc-calls"},"#"),(0,e.Uk)(" RPC calls")],-1),kn=(0,e.Wm)("p",null,"We also support some API RPC methods that are remote calls that allow the mapping function to interact with the actual node, query, and submission. A core premise of SubQuery is that it's deterministic, and therefore, to keep the results consistent we only allow historical RPC calls.",-1),dn=(0,e.Uk)("Documents in "),mn={href:"https://polkadot.js.org/docs/substrate/rpc/#rpc",target:"_blank",rel:"noopener noreferrer"},bn=(0,e.Uk)("JSON-RPC"),hn=(0,e.Uk)(" provide some methods that takes "),gn=(0,e.Wm)("code",null,"BlockHash",-1),yn=(0,e.Uk)(" as an input parameter (e.g. "),fn=(0,e.Wm)("code",null,"at?: BlockHash",-1),wn=(0,e.Uk)("), which are now permitted. We have also modified these methods to take the current indexing block hash by default."),vn=(0,e.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Let&#39;s say we are currently indexing a block with this hash number</span>\n<span class="token keyword">const</span> blockhash <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">0x844047c4cf1719ba6d54891e92c071a41e3dfe789d064871148e9d41ef086f6a</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">// Original method has an optional input is block hash</span>\n<span class="token keyword">const</span> b1 <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">getBlock</span><span class="token punctuation">(</span>blockhash<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// It will use the current block has by default like so</span>\n<span class="token keyword">const</span> b2 <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">getBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>For <a href="#custom-substrate-chains">Custom Substrate Chains</a> RPC calls, see <a href="#usage">usage</a>.</li></ul><h2 id="modules-and-libraries"><a class="header-anchor" href="#modules-and-libraries">#</a> Modules and Libraries</h2><p>In order to improve SubQuery&#39;s data processing capabilities, we have allowed some of the NodeJS&#39;s built-in modules for running mapping functions in the <a href="#the-sandbox">sandbox</a>, and have allowed users to call third-party libraries.</p>',4),qn=(0,e.Uk)("Please note this is an "),xn=(0,e.Wm)("strong",null,"experimental features",-1),Wn=(0,e.Uk)(" and you may encounter bugs or issues that many negatively impact on your mapping functions. Please report any bugs you find by creating an issue in "),Un={href:"https://github.com/subquery/subql",target:"_blank",rel:"noopener noreferrer"},Sn=(0,e.Uk)("GitHub"),Pn=(0,e.Uk)("."),jn=(0,e.uE)('<h3 id="built-in-modules"><a class="header-anchor" href="#built-in-modules">#</a> Built-in modules</h3><p>Currently, we allow the following NodeJS modules: <code>assert</code>, <code>buffer</code>, <code>crypto</code>, <code>util</code>, and <code>path</code> .</p><p>Rather than importing the whole module, we recommend only importing the required method(s) that you need. Some methods in these modules may have dependencies that are unsupported and will fail on import.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>hashMessage<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers/lib/utils&quot;</span><span class="token punctuation">;</span> <span class="token comment">//Good way</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>utils<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span> <span class="token comment">//Bad way</span>\n\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleCall</span><span class="token punctuation">(</span>extrinsic<span class="token operator">:</span> SubstrateExtrinsic<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">starterEntity</span><span class="token punctuation">(</span>extrinsic<span class="token punctuation">.</span>block<span class="token punctuation">.</span>block<span class="token punctuation">.</span>header<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    record<span class="token punctuation">.</span>field1 <span class="token operator">=</span> <span class="token function">hashMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> record<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="third-party-libraries"><a class="header-anchor" href="#third-party-libraries">#</a> Third-party libraries</h3><p>Due to the limitations of the virtual machine in our sandbox, currently we only support third-party libraries written by <strong>CommonJS</strong>.</p><p>We also support a <strong>hybrid</strong> library like <code>@polkadot/*</code> that uses ESM as default. However, if any other libraries depend on any modules in <strong>ESM</strong> format, the virtual machine will <strong>NOT</strong> compile and return an error.</p><h2 id="custom-substrate-chains"><a class="header-anchor" href="#custom-substrate-chains">#</a> Custom Substrate Chains</h2><p>SubQuery can be used on any Substrate-based chain, not just Polkadot or Kusama.</p>',9),In=(0,e.Uk)("You can use a custom Substrate-based chain and we provide tools to import types, interfaces, and additional methods automatically using "),En={href:"https://polkadot.js.org/docs/api/examples/promise/typegen/",target:"_blank",rel:"noopener noreferrer"},Cn=(0,e.Uk)("@polkadot/typegen"),_n=(0,e.Uk)("."),An=(0,e.Uk)("In the following sections we use our "),Tn={href:"https://github.com/subquery/subql-examples/tree/main/kitty",target:"_blank",rel:"noopener noreferrer"},Bn=(0,e.Uk)("kitty example"),Hn=(0,e.Uk)(" to explain the integration process."),Mn=(0,e.uE)('<h3 id="preparation"><a class="header-anchor" href="#preparation">#</a> Preparation</h3><p>Create a new directory <code>api-interfaces</code> under the project <code>src</code> folder to store all required and generated files. We also create an <code>api-interfaces/kitties</code> directory as we want to add decoration in the API from the <code>kitties</code> module.</p><h4 id="metadata"><a class="header-anchor" href="#metadata">#</a> Metadata</h4>',3),Kn=(0,e.Uk)("We need metadata to generate the actual API endpoints. In the kitty example, we use an endpoint from a local testnet, and it provides additional types. Follow the steps in "),Rn={href:"https://polkadot.js.org/docs/api/examples/promise/typegen#metadata-setup",target:"_blank",rel:"noopener noreferrer"},On=(0,e.Uk)("PolkadotJS metadata setup"),Ln=(0,e.Uk)(" to retrieve a node's metadata from its "),Nn=(0,e.Wm)("strong",null,"HTTP",-1),Gn=(0,e.Uk)(" endpoint."),Fn=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -H <span class="token string">&quot;Content-Type: application/json&quot;</span> -d <span class="token string">&#39;{&quot;id&quot;:&quot;1&quot;, &quot;jsonrpc&quot;:&quot;2.0&quot;, &quot;method&quot;: &quot;state_getMetadata&quot;, &quot;params&quot;:[]}&#39;</span> http://localhost:9933\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),Dn=(0,e.Uk)("or from its "),Jn=(0,e.Wm)("strong",null,"websocket",-1),Qn=(0,e.Uk)(" endpoint with help from "),Yn={href:"https://github.com/vi/websocat",target:"_blank",rel:"noopener noreferrer"},zn=(0,e.Wm)("code",null,"websocat",-1),Vn=(0,e.Uk)(":"),$n=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>//Install the websocat\nbrew <span class="token function">install</span> websocat\n\n//Get metadata\n<span class="token builtin class-name">echo</span> state_getMetadata <span class="token operator">|</span> websocat <span class="token string">&#39;ws://127.0.0.1:9944&#39;</span> --jsonrpc\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1),Xn=(0,e.Uk)("Next, copy and paste the output to a JSON file. In our "),Zn={href:"https://github.com/subquery/subql-examples/tree/main/kitty",target:"_blank",rel:"noopener noreferrer"},ns=(0,e.Uk)("kitty example"),ss=(0,e.Uk)(", we have created "),as=(0,e.Wm)("code",null,"api-interface/kitty.json",-1),es=(0,e.Uk)("."),ts=(0,e.Wm)("h4",{id:"type-definitions"},[(0,e.Wm)("a",{class:"header-anchor",href:"#type-definitions"},"#"),(0,e.Uk)(" Type definitions")],-1),ps=(0,e.Uk)("We assume that the user knows the specific types and RPC support from the chain, and it is defined in the "),os=(0,e.Uk)("Manifest"),ls=(0,e.Uk)("."),cs=(0,e.Uk)("Following "),rs={href:"https://polkadot.js.org/docs/api/examples/promise/typegen#metadata-setup",target:"_blank",rel:"noopener noreferrer"},is=(0,e.Uk)("types setup"),us=(0,e.Uk)(", we create :"),ks=(0,e.uE)('<ul><li><code>src/api-interfaces/definitions.ts</code> - this exports all the sub-folder definitions</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> kitties <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./kitties/definitions&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>src/api-interfaces/kitties/definitions.ts</code> - type definitions for the kitties module</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    <span class="token comment">// custom types</span>\n    types<span class="token operator">:</span> <span class="token punctuation">{</span>\n        Address<span class="token operator">:</span> <span class="token string">&quot;AccountId&quot;</span><span class="token punctuation">,</span>\n        LookupSource<span class="token operator">:</span> <span class="token string">&quot;AccountId&quot;</span><span class="token punctuation">,</span>\n        KittyIndex<span class="token operator">:</span> <span class="token string">&quot;u32&quot;</span><span class="token punctuation">,</span>\n        Kitty<span class="token operator">:</span> <span class="token string">&quot;[u8; 16]&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// custom rpc : api.rpc.kitties.getKittyPrice</span>\n    rpc<span class="token operator">:</span> <span class="token punctuation">{</span>\n        getKittyPrice<span class="token operator">:</span><span class="token punctuation">{</span>\n            description<span class="token operator">:</span> <span class="token string">&#39;Get Kitty price&#39;</span><span class="token punctuation">,</span>\n            params<span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token punctuation">{</span>\n                    name<span class="token operator">:</span> <span class="token string">&#39;at&#39;</span><span class="token punctuation">,</span>\n                    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&#39;BlockHash&#39;</span><span class="token punctuation">,</span>\n                    isHistoric<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                    isOptional<span class="token operator">:</span> <span class="token boolean">false</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                    name<span class="token operator">:</span> <span class="token string">&#39;kittyIndex&#39;</span><span class="token punctuation">,</span>\n                    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&#39;KittyIndex&#39;</span><span class="token punctuation">,</span>\n                    isOptional<span class="token operator">:</span> <span class="token boolean">false</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&#39;Balance&#39;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h4 id="packages"><a class="header-anchor" href="#packages">#</a> Packages</h4><ul><li>In the <code>package.json</code> file, make sure to add <code>@polkadot/typegen</code> as a development dependency and <code>@polkadot/api</code> as a regular dependency (ideally the same version). We also need <code>ts-node</code> as a development dependency to help us run the scripts.</li><li>We add scripts to run both types; <code>generate:defs</code> and metadata <code>generate:meta</code> generators (in that order, so metadata can use the types).</li></ul><p>Here is a simplified version of <code>package.json</code>. Make sure in the <strong>scripts</strong> section the package name is correct and the directories are valid.</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;kitty-birthinfo&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;generate:defs&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ts-node --skip-project node_modules/.bin/polkadot-types-from-defs --package kitty-birthinfo/api-interfaces --input ./src/api-interfaces&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;generate:meta&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ts-node --skip-project node_modules/.bin/polkadot-types-from-chain --package kitty-birthinfo/api-interfaces --endpoint ./src/api-interfaces/kitty.json --output ./src/api-interfaces --strict&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;@polkadot/api&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.9.2&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;typescript&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.1.3&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;@polkadot/typegen&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.9.2&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;ts-node&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^8.6.2&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="type-generation"><a class="header-anchor" href="#type-generation">#</a> Type generation</h3><p>Now that preparation is completed, we are ready to generate types and metadata. Run the commands below:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Yarn to install new dependencies</span>\n<span class="token function">yarn</span>\n\n<span class="token comment"># Generate types</span>\n<span class="token function">yarn</span> generate:defs\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>In each modules folder (eg <code>/kitties</code>), there should now be a generated <code>types.ts</code> that defines all interfaces from this modules&#39; definitions, also a file <code>index.ts</code> that exports them all.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Generate metadata</span>\n<span class="token function">yarn</span> generate:meta\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This command will generate the metadata and a new api-augment for the APIs. As we don&#39;t want to use the built-in API, we will need to replace them by adding an explicit override in our <code>tsconfig.json</code>. After the updates, the paths in the config will look like this (without the comments):</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// this is the package name we use (in the interface imports, --package for generators) */</span>\n      <span class="token property">&quot;kitty-birthinfo/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token comment">// here we replace the @polkadot/api augmentation with our own, generated from chain</span>\n      <span class="token property">&quot;@polkadot/api/augment&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/interfaces/augment-api.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token comment">// replace the augmented types with our own, as generated from definitions</span>\n      <span class="token property">&quot;@polkadot/types/augment&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/interfaces/augment-types.ts&quot;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="usage"><a class="header-anchor" href="#usage">#</a> Usage</h3><p>Now in the mapping function, we can show how the metadata and types actually decorate the API. The RPC endpoint will support the modules and methods we declared above.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">kittyApiHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">//return the KittyIndex type</span>\n    <span class="token class-name"><span class="token keyword">const</span></span> nextKittyId <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token punctuation">.</span>query<span class="token punctuation">.</span>kitties<span class="token punctuation">.</span><span class="token function">nextKittyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// return the Kitty type, input parameters types are AccountId and KittyIndex</span>\n    <span class="token keyword">const</span> allKitties  <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token punctuation">.</span>query<span class="token punctuation">.</span>kitties<span class="token punctuation">.</span><span class="token function">kitties</span><span class="token punctuation">(</span><span class="token string">&#39;xxxxxxxxx&#39;</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span>\n    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Next kitty id </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>nextKittyId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token comment">//Custom rpc, set undefined to blockhash</span>\n    <span class="token keyword">const</span> kittyPrice <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>kitties<span class="token punctuation">.</span><span class="token function">getKittyPrice</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span>nextKittyId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>If you wish to publish this project to our explorer, please include the generated files in <code>src/api-interfaces</code>.</strong></p>',19),ds={render:function(n,s){const a=(0,e.up)("OutboundLink"),ds=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("p",null,[p,(0,e.Wm)("a",o,[l,(0,e.Wm)(a)]),c,(0,e.Wm)("a",r,[i,(0,e.Wm)(a)]),u,k,d,m,b]),h,g,(0,e.Wm)("p",null,[y,(0,e.Wm)(ds,{to:"/create/manifest.html#mapping-filters"},{default:(0,e.w5)((()=>[f])),_:1}),w]),v,(0,e.Wm)("p",null,[q,(0,e.Wm)("a",x,[W,(0,e.Wm)(a)]),U,(0,e.Wm)("a",S,[P,(0,e.Wm)(a)]),j,I,E]),C,(0,e.Wm)("p",null,[_,(0,e.Wm)("a",A,[T,(0,e.Wm)(a)]),B,(0,e.Wm)("a",H,[M,(0,e.Wm)(a)]),K,R,O]),L,N,G,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[(0,e.Wm)("a",F,[D,(0,e.Wm)(a)]),J,Q,Y]),(0,e.Wm)("li",null,[(0,e.Wm)("a",z,[V,(0,e.Wm)(a)]),$,X,Z]),(0,e.Wm)("li",null,[(0,e.Wm)("a",nn,[sn,(0,e.Wm)(a)]),an,en,tn])]),pn,(0,e.Wm)("p",null,[on,(0,e.Wm)("a",ln,[cn,(0,e.Wm)(a)]),rn]),un,kn,(0,e.Wm)("p",null,[dn,(0,e.Wm)("a",mn,[bn,(0,e.Wm)(a)]),hn,gn,yn,fn,wn]),vn,(0,e.Wm)("p",null,[qn,xn,Wn,(0,e.Wm)("a",Un,[Sn,(0,e.Wm)(a)]),Pn]),jn,(0,e.Wm)("p",null,[In,(0,e.Wm)("a",En,[Cn,(0,e.Wm)(a)]),_n]),(0,e.Wm)("p",null,[An,(0,e.Wm)("a",Tn,[Bn,(0,e.Wm)(a)]),Hn]),Mn,(0,e.Wm)("p",null,[Kn,(0,e.Wm)("a",Rn,[On,(0,e.Wm)(a)]),Ln,Nn,Gn]),Fn,(0,e.Wm)("p",null,[Dn,Jn,Qn,(0,e.Wm)("a",Yn,[zn,(0,e.Wm)(a)]),Vn]),$n,(0,e.Wm)("p",null,[Xn,(0,e.Wm)("a",Zn,[ns,(0,e.Wm)(a)]),ss,as,es]),ts,(0,e.Wm)("p",null,[ps,(0,e.Wm)(ds,{to:"/create/manifest.html"},{default:(0,e.w5)((()=>[os])),_:1}),ls]),(0,e.Wm)("p",null,[cs,(0,e.Wm)("a",rs,[is,(0,e.Wm)(a)]),us]),ks],64)}}}}]);