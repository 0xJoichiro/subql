(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{384:function(e,a,t){"use strict";t.r(a);var s=t(42),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"subquery-初始包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#subquery-初始包"}},[e._v("#")]),e._v(" SubQuery - 初始包")]),e._v(" "),t("p",[e._v("The Starter Package is an example  that you can use as a starting point for developing your SubQuery project.\nA subquery package defines which data The Subquery will index from the substrate network, and how it will store it.")]),e._v(" "),t("h2",{attrs:{id:"准备工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[e._v("#")]),e._v(" 准备工作")]),e._v(" "),t("h4",{attrs:{id:"install-the-subquery-cli"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#install-the-subquery-cli"}},[e._v("#")]),e._v(" Install the SubQuery CLI")]),e._v(" "),t("p",[e._v("Install Subquery CLI globally on your terminal by using Yarn or NPM:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$npm install -g @subql-cli\n$yarn global add @subql-cli\n")])])]),t("p",[e._v("Run help to see available commands and usage provide by CLI")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$suqbl help\n")])])]),t("h4",{attrs:{id:"initialize-the-starter-package"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#initialize-the-starter-package"}},[e._v("#")]),e._v(" Initialize the starter package")]),e._v(" "),t("p",[e._v("Inside the folder in which you want to create the subquery project, and run this command:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$subql  init --starter\n")])])]),t("p",[e._v("Then you should see a directory "),t("code",[e._v("subql-starter")]),e._v(" has been created inside your folder, you can use this\nas the start point of your project. And the files should be identical as following:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- subql-starter\n  L package.json\n  L project.yaml\n  L README.md\n  L schema.graphql\n  L tsconfig.json\n  L src\n    L index.ts\n    L mappings\n      L Extrinsic.ts\n")])])]),t("p",[e._v("Last, under the "),t("code",[e._v("suql-starter")]),e._v(" directory, run follow command to install all the dependency.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$npm install\n")])])]),t("h2",{attrs:{id:"配置项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置项目"}},[e._v("#")]),e._v(" 配置项目")]),e._v(" "),t("h4",{attrs:{id:"the-manifest"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-manifest"}},[e._v("#")]),e._v(" The Manifest")]),e._v(" "),t("ul",[t("li",[e._v("Inside the "),t("code",[e._v("project.yaml")]),e._v(", defines the substrate extrinsic your subquery indexes, which events \\ calls\nfrom these extrinsic to pay attention to, and how to map event data to entities that our hosted node will\nstores and allows to query.")])]),e._v(" "),t("h4",{attrs:{id:"the-graphql-schema"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-graphql-schema"}},[e._v("#")]),e._v(" The GraphQL Schema")]),e._v(" "),t("ul",[t("li",[e._v("Next, you need to define the GraphQL schemas inside of "),t("code",[e._v("schema.graphql")]),e._v(' file. To know how to write in  "GraphQL schema language",\nwe recommend to check out on '),t("a",{attrs:{href:"https://graphql.org/learn/schema/#type-language",target:"_blank",rel:"noopener noreferrer"}},[e._v("Schemas and Types"),t("OutboundLink")],1),e._v(".")])]),e._v(" "),t("h4",{attrs:{id:"mapping-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mapping-function"}},[e._v("#")]),e._v(" Mapping function")]),e._v(" "),t("p",[e._v("The mappings transform the substrate data your mappings are sourcing into entities defined in your schema. Mappings are written\nin a subset of TypeScript called AssemblyScript which can be compiled to WASM (WebAssembly).")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("We also provided an example of a mapping function in "),t("code",[e._v("src/mappings/Extrinsic.ts")]),e._v(". For each handler that is defined in "),t("code",[e._v("project.yaml")]),e._v("\nunder mapping.handlers, create an exported function of the same name.")])]),e._v(" "),t("li",[t("p",[e._v("Under the "),t("code",[e._v("src/index.ts")]),e._v("，you need to export the functions of handlers has defined in above.")])])]),e._v(" "),t("h4",{attrs:{id:"code-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#code-generation"}},[e._v("#")]),e._v(" Code generation")]),e._v(" "),t("p",[e._v("Next, run codegen command under your project root directory.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$subql codegen\n")])])]),t("ul",[t("li",[e._v("This will create a new directory "),t("code",[e._v("src/types")]),e._v(" which contains all generate entities in AssemblyScript.")]),e._v(" "),t("li",[e._v("Generate entity class for each types you have defined previously in "),t("code",[e._v("schema.graphql")]),e._v(". These classes provide type-safe\nentity loading, read and write access to entity fields.")])]),e._v(" "),t("h2",{attrs:{id:"部署项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署项目"}},[e._v("#")]),e._v(" 部署项目")]),e._v(" "),t("h4",{attrs:{id:"pack-and-upload"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pack-and-upload"}},[e._v("#")]),e._v(" Pack and upload")]),e._v(" "),t("p",[e._v("In order to deploy your subquery project to our hosted service, it is mandatory to pack your configuration before upload.\nRun pack comand from npm from root directory of your project will automatically generate a "),t("code",[e._v("your-project-name.tgz")]),e._v(" file.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$npm pack\n")])])]),t("p",[e._v("Last, all you need to do is upload this file to our host.\nAll good to go.")])])}),[],!1,null,null,null);a.default=r.exports}}]);