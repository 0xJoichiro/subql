(self.webpackChunksubql_mono=self.webpackChunksubql_mono||[]).push([[987],{8129:(e,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>s});const s={key:"v-520fc2b6",path:"/create/introduction.html",title:"Creating a SubQuery Project",lang:"English",frontmatter:{},excerpt:"",headers:[{level:2,title:"Basic Workflow",slug:"basic-workflow",children:[]},{level:2,title:"Directory Structure",slug:"directory-structure",children:[]},{level:2,title:"Code Generation",slug:"code-generation",children:[]},{level:2,title:"Build",slug:"build",children:[]},{level:2,title:"Logging",slug:"logging",children:[]},{level:2,title:"SubQuery Examples",slug:"subquery-examples",children:[]}],filePathRelative:"create/introduction.md",git:{updatedTime:1622513136e3,contributors:[]}}},3839:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>G});var s=a(6252);const t=(0,s.uE)('<h1 id="creating-a-subquery-project"><a class="header-anchor" href="#creating-a-subquery-project">#</a> Creating a SubQuery Project</h1><h2 id="basic-workflow"><a class="header-anchor" href="#basic-workflow">#</a> Basic Workflow</h2><p>Some of the following examples will assume you have successfully initialized the starter package in the <a href="/quickstart">Quick start</a> section. From that starter package, we&#39;ll walk through the standard process to customise and implement your own SubQuery project.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>subql init --starter PROJECT_NAME\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>More advanced users can jump directly to the resources they need from a fresh project.</p><p>Creating a bespoke SubQuery project is ususally done in the following process:</p>',6),r=(0,s.uE)('<li>Initalise project using <code>subql init PROJECT_NAME</code></li><li>Update Manifest file (<code>project.yaml</code>) to include information about your blockchain, and the entities that you will map - see <a href="/create/manifest">Manifest File</a></li><li>Create GraphQL Entities in your schema (<code>schema.graphql</code>) that define the shape of the data that you will extract and persist for querying - see <a href="/create/graphql">GraphQL Schema</a></li><li>Add all the mapping functions that are invoked to transform chain data to the GraphQL entities that you have defined - see <a href="/create/mapping">Mapping</a></li>',4),l=(0,s.Uk)("Generate code, build, and publish to SubQuery Projects (or run in your own local node) - see "),o=(0,s.Uk)("Running and Querying your Starter Project"),i=(0,s.Uk)(" in our quick start guide."),u=(0,s.uE)('<h2 id="directory-structure"><a class="header-anchor" href="#directory-structure">#</a> Directory Structure</h2><p>Following map provides an overview of the directory structure of a SubQuery project.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>- project-name\n  L package.json\n  L project.yaml\n  L README.md\n  L schema.graphql\n  L tsconfig.json\n  L docker-compose.yml\n  L src\n    L index.ts\n    L mappings\n      L mappingHandlers.ts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="code-generation"><a class="header-anchor" href="#code-generation">#</a> Code Generation</h2><p>Whenever you change your GraphQL entites, you must regenerate your types directory with the following command.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>yarn codegen\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This will create a new directory (or update the existing) <code>src/types</code> which contains generated entity classes for each type you have defined previously in <code>schema.graphql</code>. These classes provide type-safe entity loading, read and write access to entity fields - see more about this process in <a href="/create/graphql">the GraphQL Schema</a>.</p><h2 id="build"><a class="header-anchor" href="#build">#</a> Build</h2><p>In order run your SubQuery Project on a locally hosted SubQuery Node, you need to build your work.</p><p>Run the build command from the project&#39;s root directory.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Yarn</span>\n<span class="token function">yarn</span> build\n\n<span class="token comment"># NPM</span>\n<span class="token function">npm</span> run-script build\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="logging"><a class="header-anchor" href="#logging">#</a> Logging</h2><p>The <code>console.log</code> method is <strong>no longer supported</strong>. Instead a <code>logger</code> module has been injected in the types, which means we can support a logger that can accept various logging levels.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Info level message&quot;</span><span class="token punctuation">)</span>\nlogger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Debugger level message&quot;</span><span class="token punctuation">)</span>\nlogger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Warning level message&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>In addition, viewing the debug messages requires adding <code>--log-level debug</code> in your command line.</p><h2 id="subquery-examples"><a class="header-anchor" href="#subquery-examples">#</a> SubQuery Examples</h2>',16),c=(0,s.Wm)("thead",null,[(0,s.Wm)("tr",null,[(0,s.Wm)("th",null,"Example"),(0,s.Wm)("th",null,"Description"),(0,s.Wm)("th",null,"Keywords")])],-1),p={href:"https://github.com/subquery/subql-examples/tree/main/extrinsic-finalized-block",target:"_blank",rel:"noopener noreferrer"},d=(0,s.Uk)("extrinsic-finalized-block"),m=(0,s.Wm)("td",null,"Index extrinsics and so they can be queried by hash.",-1),h=(0,s.Wm)("td",null,"blockHandler",-1),b={href:"https://github.com/subquery/subql-examples/tree/main/block-timestamp",target:"_blank",rel:"noopener noreferrer"},g=(0,s.Uk)("block-timestamp"),y=(0,s.Wm)("td",null,"Indexes timestamp of each finalized block.",-1),f=(0,s.Wm)("td",null,"callHandler",-1),k={href:"https://github.com/subquery/subql-examples/tree/main/sum-reward",target:"_blank",rel:"noopener noreferrer"},v=(0,s.Uk)("sum-reward"),W=(0,s.Wm)("td",null,"Indexes staking bond, reward and slash from events of finalized block.",-1),q=(0,s.Wm)("td",null,"eventHandler",-1),w={href:"https://github.com/subquery/subql-examples/tree/main/kitty",target:"_blank",rel:"noopener noreferrer"},x=(0,s.Uk)("kitty"),j=(0,s.Wm)("td",null,"Indexes birthinfo of kitties.",-1),L=(0,s.Wm)("td",null,"callHandler, eventHandler, customTypes",-1),Q={href:"https://github.com/subquery/subql-examples/tree/main/validator-threshold",target:"_blank",rel:"noopener noreferrer"},S=(0,s.Uk)("validator-threshold"),E=(0,s.Wm)("td",null,"Indexes the least staking amount required for a validator to be elected.",-1),I=(0,s.Wm)("td",null,"blockHandler, @polkadot/api",-1),_={href:"https://github.com/subquery/subql-examples/tree/main/entity-relation",target:"_blank",rel:"noopener noreferrer"},C=(0,s.Uk)("entity-relation"),U=(0,s.Wm)("td",null,"Indexes balance transfers between accounts, also indexes utility batchAll to find out the content of the extrinsic calls",-1),P=(0,s.Wm)("td",null,"One-to-many, many-to-many relationship",-1),G={render:function(e,n){const a=(0,s.up)("RouterLink"),G=(0,s.up)("OutboundLink");return(0,s.wg)(),(0,s.j4)(s.HY,null,[t,(0,s.Wm)("ol",null,[r,(0,s.Wm)("li",null,[l,(0,s.Wm)(a,{to:"/quickstart.html#running-and-querying-your-starter-project"},{default:(0,s.w5)((()=>[o])),_:1}),i])]),u,(0,s.Wm)("table",null,[c,(0,s.Wm)("tbody",null,[(0,s.Wm)("tr",null,[(0,s.Wm)("td",null,[(0,s.Wm)("a",p,[d,(0,s.Wm)(G)])]),m,h]),(0,s.Wm)("tr",null,[(0,s.Wm)("td",null,[(0,s.Wm)("a",b,[g,(0,s.Wm)(G)])]),y,f]),(0,s.Wm)("tr",null,[(0,s.Wm)("td",null,[(0,s.Wm)("a",k,[v,(0,s.Wm)(G)])]),W,q]),(0,s.Wm)("tr",null,[(0,s.Wm)("td",null,[(0,s.Wm)("a",w,[x,(0,s.Wm)(G)])]),j,L]),(0,s.Wm)("tr",null,[(0,s.Wm)("td",null,[(0,s.Wm)("a",Q,[S,(0,s.Wm)(G)])]),E,I]),(0,s.Wm)("tr",null,[(0,s.Wm)("td",null,[(0,s.Wm)("a",_,[C,(0,s.Wm)(G)])]),U,P])])])],64)}}}}]);