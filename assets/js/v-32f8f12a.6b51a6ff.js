(self.webpackChunksubql_mono=self.webpackChunksubql_mono||[]).push([[87],{7804:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-32f8f12a",path:"/create/graphql.html",title:"GraphQL Schema",lang:"English",frontmatter:{},excerpt:"",headers:[{level:2,title:"Defining Entities",slug:"defining-entities",children:[{level:3,title:"Entites",slug:"entites",children:[]},{level:3,title:"Supported scalars and types",slug:"supported-scalars-and-types",children:[]}]},{level:2,title:"Indexing by Non-primary-key field",slug:"indexing-by-non-primary-key-field",children:[]},{level:2,title:"Entity Relationships",slug:"entity-relationships",children:[{level:3,title:"One-to-One Relationships",slug:"one-to-one-relationships",children:[]},{level:3,title:"One-to-Many relationships",slug:"one-to-many-relationships",children:[]},{level:3,title:"Many-to-Many relationships",slug:"many-to-many-relationships",children:[]},{level:3,title:"Reverse Lookups",slug:"reverse-lookups",children:[]}]},{level:2,title:"JSON type",slug:"json-type",children:[{level:3,title:"Define JSON directive",slug:"define-json-directive",children:[]},{level:3,title:"Querying JSON field",slug:"querying-json-field",children:[]}]}],filePathRelative:"create/graphql.md",git:{updatedTime:1620191309e3,contributors:[]}}},6265:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>k});var e=a(6252);const t=(0,e.Wm)("h1",{id:"graphql-schema"},[(0,e.Wm)("a",{class:"header-anchor",href:"#graphql-schema"},"#"),(0,e.Uk)(" GraphQL Schema")],-1),p=(0,e.Wm)("h2",{id:"defining-entities"},[(0,e.Wm)("a",{class:"header-anchor",href:"#defining-entities"},"#"),(0,e.Uk)(" Defining Entities")],-1),o=(0,e.Uk)("The "),l=(0,e.Wm)("code",null,"schema.graphql",-1),c=(0,e.Uk)(" file defines the various GraphQL schemas. Due to the way that the GraphQL query language works, the schema file essentially dictates the shape of your data from SubQuery. To learn more about how writing in GraphQL schema language, we recommend checking out on "),i={href:"https://graphql.org/learn/schema/#type-language",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("Schemas and Types"),u=(0,e.Uk)("."),d=(0,e.uE)('<p><strong>Important: When you make any changes to the schema file please ensure that you regenerate your types directory with the following command <code>yarn codegen</code></strong></p><h3 id="entites"><a class="header-anchor" href="#entites">#</a> Entites</h3><p>Each entity must define its required fields <code>id</code> with the type of <code>ID!</code>, it used as the primary key and unique among all entities of the same type.</p><p>Non nullable fields in the entity are indicated by <code>!</code>. Please see the example below:</p><div class="language-graphql ext-graphql line-numbers-mode"><pre class="language-graphql"><code><span class="token keyword">type</span> <span class="token class-name">Example</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span> <span class="token comment"># id field is always required and must look like this</span>\n  <span class="token attr-name">name</span><span class="token punctuation">:</span> String<span class="token operator">!</span> <span class="token comment"># This is a required field</span>\n  <span class="token attr-name">address</span><span class="token punctuation">:</span> String <span class="token comment"># This is an optional field</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>Important: When you make any changes to the schema file please ensure that you regenerate your types directory with the following command <code>yarn codegen</code></strong></p><h3 id="supported-scalars-and-types"><a class="header-anchor" href="#supported-scalars-and-types">#</a> Supported scalars and types</h3><p>We currently supporting flowing scalars types:</p><ul><li><code>ID</code></li><li><code>Int</code></li><li><code>String</code></li><li><code>BigInt</code></li><li><code>Date</code></li><li><code>Boolean</code></li><li><code>&lt;EntityName&gt;</code> for nested relationship entities, you might use the defined entity&#39;s name as one of the fields. Please see in <a href="#entity-relationships">Entity Relationships</a>.</li><li><code>JSON</code> can alternatively store structured data, please see <a href="#json-type">JSON type</a></li></ul><h2 id="indexing-by-non-primary-key-field"><a class="header-anchor" href="#indexing-by-non-primary-key-field">#</a> Indexing by Non-primary-key field</h2><p>To improve query performance, index an entity field simply by implement the <code>@index</code> annotation on a non-primary-key field.</p><p>We don&#39;t allow user to add <code>@index</code> annotation on any <a href="#json-type">JSON</a> object. By default, indexes automatically added for JSON fields in the database, but only for enhance query service performance purpose.</p><p>Here is an example.</p><div class="language-graphql ext-graphql line-numbers-mode"><pre class="language-graphql"><code><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token attr-name">name</span><span class="token punctuation">:</span> String<span class="token operator">!</span> <span class="token directive function">@index</span><span class="token punctuation">(</span><span class="token attr-name">unique</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment"># unique can be set to true or false</span>\n  <span class="token attr-name">title</span><span class="token punctuation">:</span> Title<span class="token operator">!</span> <span class="token directive function">@index</span> <span class="token comment"># By default indexes are not unique, index by foreign key field </span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Title</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>  \n  <span class="token attr-name">name</span><span class="token punctuation">:</span> String<span class="token operator">!</span> <span class="token directive function">@index</span><span class="token punctuation">(</span><span class="token attr-name">unique</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Assuming we knew this user&#39;s name, but we don&#39;t know the exact id value, rather than extract all users and then filtering by name we can add <code>@index</code> behind the name field. This makes querying much faster and we can additionally pass the <code>unique: true</code> to ensure uniqueness.</p><p><strong>If a field is not unique, the maximum result set size is 100</strong></p><p>When code generation is run, this will automatically create a <code>getByName</code> under the <code>User</code> model, and The foreign key field <code>title</code> will create a <code>getByTitleId</code> method, which both can directly be accessed in the mapping function.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">/* Prepare a record for title entity */</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> titles <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;id_1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Captain&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Handler in mapping function</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>User<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../types/models/User&quot;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>Title<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../types/models/Title&quot;</span>\n\n<span class="token keyword">const</span> jack <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">&#39;Jack Sparrow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> captainTitle <span class="token operator">=</span> <span class="token keyword">await</span> Title<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">&#39;Captain&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> pirateLords <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">getByTitleId</span><span class="token punctuation">(</span>captainTitle<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List of all Captains</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="entity-relationships"><a class="header-anchor" href="#entity-relationships">#</a> Entity Relationships</h2><p>An entity often has nested relationships with other entities. Set the field value to another entity name will define a one-to-one relationship between these two entities by default.</p><p>Different entity relationships (one-to-one, one-to-many, and many-to-many) can be configured using the examples below</p><h3 id="one-to-one-relationships"><a class="header-anchor" href="#one-to-one-relationships">#</a> One-to-One Relationships</h3><p>One-to-one relationships are by default when only a single entity is mapped to another</p><p>Exmaple: A Passport will only have one person and a person only has one passport (in this example):</p><div class="language-graphql ext-graphql line-numbers-mode"><pre class="language-graphql"><code><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Passport</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token attr-name">owner</span><span class="token punctuation">:</span> Person<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>or</p><div class="language-graphql ext-graphql line-numbers-mode"><pre class="language-graphql"><code><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token attr-name">passport</span><span class="token punctuation">:</span> Passport<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Passport</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token attr-name">owner</span><span class="token punctuation">:</span> Person<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="one-to-many-relationships"><a class="header-anchor" href="#one-to-many-relationships">#</a> One-to-Many relationships</h3><p>You cna use brackets to indicate that a field type includes multiple entities</p><p>Example: A person can have multipe accounts</p><div class="language-graphql ext-graphql line-numbers-mode"><pre class="language-graphql"><code><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token attr-name">accounts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Account<span class="token punctuation">]</span> \n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Account</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token attr-name">publicAddress</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="many-to-many-relationships"><a class="header-anchor" href="#many-to-many-relationships">#</a> Many-to-Many relationships</h3><p>A many-to-Many relationship can be achieved by implementing a mapping entity to connect the other two entities.</p><p>Example: Each person is a part of multiple groups and groups have multiple different people</p><div class="language-graphql ext-graphql line-numbers-mode"><pre class="language-graphql"><code><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token attr-name">name</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n  <span class="token attr-name">groups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>PersonGroup<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">PersonGroup</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token attr-name">person</span><span class="token punctuation">:</span> Person<span class="token operator">!</span>\n  <span class="token attr-name">Group</span><span class="token punctuation">:</span> Group<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Group</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token attr-name">name</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n  <span class="token attr-name">persons</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>PersonGroup<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Also, it is possible to create a connection of the same entity in multiple fields of the middle entity.</p><p>Example, an account can have multiple transfers, and each transfer has a source and destination account.</p><p>This will establish a bidirectional relationship between two Accounts (from and to) through Transfer table.</p><div class="language-graphql ext-graphql line-numbers-mode"><pre class="language-graphql"><code><span class="token keyword">type</span> <span class="token class-name">Account</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token attr-name">publicAddress</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Transfer</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token attr-name">amount</span><span class="token punctuation">:</span> BigInt\n  <span class="token attr-name">from</span><span class="token punctuation">:</span> Account<span class="token operator">!</span>\n  <span class="token attr-name">to</span><span class="token punctuation">:</span> Account<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="reverse-lookups"><a class="header-anchor" href="#reverse-lookups">#</a> Reverse Lookups</h3><p>To enable reverse lookup on an entity to a relation, attach <code>@derivedFrom</code> to the field and point to its reverse lookup field of another entity.</p><p>This create a virtual field on the entity that can be queried.</p><p>The Transfer from an account accessible from the Account by deriving a transfers field:</p><div class="language-graphql ext-graphql line-numbers-mode"><pre class="language-graphql"><code><span class="token keyword">type</span> <span class="token class-name">Account</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token attr-name">publicAddress</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n  <span class="token attr-name">sentTransfers</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Transfer<span class="token punctuation">]</span> <span class="token directive function">@derivedFrom</span><span class="token punctuation">(</span><span class="token attr-name">field</span><span class="token punctuation">:</span> <span class="token string">&quot;from&quot;</span><span class="token punctuation">)</span>\n  <span class="token attr-name">recievedTransfers</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Transfer<span class="token punctuation">]</span> <span class="token directive function">@derivedFrom</span><span class="token punctuation">(</span><span class="token attr-name">field</span><span class="token punctuation">:</span> <span class="token string">&quot;to&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Transfer</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span>\n  <span class="token attr-name">amount</span><span class="token punctuation">:</span> BigInt\n  <span class="token attr-name">from</span><span class="token punctuation">:</span> Account<span class="token operator">!</span>\n  <span class="token attr-name">to</span><span class="token punctuation">:</span> Account<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="json-type"><a class="header-anchor" href="#json-type">#</a> JSON type</h2><p>We are supporting saving data as a JSON type, which is a fast way to store structured data. We&#39;ll automatically generate corresponding JSON interfaces for querying this data and save you time defining and managing entities.</p><p>We recommend users use the JSON type in the following scenarios:</p><ul><li>When storing structured data in a single field is more manageable than creating multiple separate entities.</li><li>Saving arbitrary key/value user preferences (where the value can be boolean, textual, or numeric, and you don&#39;t want to have separate columns for different data types)</li><li>The schema is volatile and change frequently</li></ul><h3 id="define-json-directive"><a class="header-anchor" href="#define-json-directive">#</a> Define JSON directive</h3><p>Define the propery as a JSON type by adding the <code>jsonField</code> annotation in the entity, this will automatically generate interfaces for all JSON objects in your project under <code>types/interfaces.ts</code>, and you can access them in your mapping function.</p><p>Unlike the entity, the jsonField directive object does not require any <code>id</code> field. A JSON object is also able to nest with other JSON objects.</p><div class="language-graphql ext-graphql line-numbers-mode"><pre class="language-graphql"><code><span class="token keyword">type</span> <span class="token class-name">AddressDetail</span> <span class="token directive function">@jsonField</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">street</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n  <span class="token attr-name">district</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">ContactCard</span> <span class="token directive function">@jsonField</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">phone</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n  <span class="token attr-name">address</span><span class="token punctuation">:</span> AddressDetail <span class="token comment"># Nested JSON</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token directive function">@entity</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span> \n  <span class="token attr-name">contact</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>ContactCard<span class="token punctuation">]</span> <span class="token comment"># Store a list of JSON objects</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="querying-json-field"><a class="header-anchor" href="#querying-json-field">#</a> Querying JSON field</h3><p>The drawback of using JSON types is a slight impact on query efficiency when filtering since each time it performs a text search on the entire entity.</p><p>However, the impact is still acceptable in our query service. Here is an example of how to use the <code>contains</code> operator in the GraphQL query on a JSON field to find the the first 5 users own phone numbers contains &#39;0064&#39;.</p><div class="language-graphql ext-graphql line-numbers-mode"><pre class="language-graphql"><code><span class="token comment">#To find the the first 5 users own phone numbers contains &#39;0064&#39;.</span>\n\n<span class="token keyword">query</span><span class="token punctuation">{</span>\n  user<span class="token punctuation">(</span>\n    <span class="token attr-name">first</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n    <span class="token attr-name">filter</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token attr-name">contactCard</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token attr-name">contains</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token attr-name">phone</span><span class="token punctuation">:</span> <span class="token string">&quot;0064&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    nodes<span class="token punctuation">{</span>\n      id\n      contactCard\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',57),k={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,p,(0,e.Wm)("p",null,[o,l,c,(0,e.Wm)("a",i,[r,(0,e.Wm)(a)]),u]),d],64)}}}}]);