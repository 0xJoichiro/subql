(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{374:function(e,t,r){"use strict";r.r(t);var a=r(44),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"introduction"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),r("p",[e._v("Almost every substrate project has a need to process and query data.\nSubQuery is a open-source tool to provide a complete solution to this problem and will become core infrastructure for the Polkadot ecosystem.\nWe expect it to solve how to Extract, Transform, Persist, and Query data intially, and then how to Connect and Present data in the future.")]),e._v(" "),r("p",[e._v("SubQuery is NOT an ETL tool, the persisted data is minimized and shaped from the perspective of how it will be used.")]),e._v(" "),r("p",[e._v("SubQuery aims to support all substrate-compatible networks.")]),e._v(" "),r("h4",{attrs:{id:"step-1-create-a-subquery-project"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#step-1-create-a-subquery-project"}},[e._v("#")]),e._v(" Step #1: Create a SubQuery project")]),e._v(" "),r("ol",[r("li",[e._v("use "),r("code",[e._v("@subql/cli")]),e._v(" tool we provide to create a SubQuery project\n"),r("ul",[r("li",[e._v("it is written in typescript")]),e._v(" "),r("li",[e._v("user needs to config the project, define a schema and implement mapping functions")])])]),e._v(" "),r("li",[e._v("use "),r("code",[e._v("@subql/cli")]),e._v(" to generate types from the given schema")]),e._v(" "),r("li",[e._v("use "),r("code",[e._v("@subql/cli")]),e._v(" to compile and pack the SubQuery project")])]),e._v(" "),r("h4",{attrs:{id:"step-2-run-an-indexer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#step-2-run-an-indexer"}},[e._v("#")]),e._v(" Step #2: Run an indexer")]),e._v(" "),r("p",[e._v("Prerequisites")]),e._v(" "),r("ul",[r("li",[e._v("A Postgres database")]),e._v(" "),r("li",[e._v("Non-archive full node. If storage query is used, then an archive node is required to extract chain data. "),r("a",{attrs:{href:"https://onfinality.io/api_service",target:"_blank",rel:"noopener noreferrer"}},[e._v("OnFinality"),r("OutboundLink")],1),e._v(" provides an archive node with a generous free tier that should be more than able to cover most cases.")]),e._v(" "),r("li",[e._v("A moderately powerful computer to run an indexer in the background\nThen start our "),r("code",[e._v("@subql/node")]),e._v(" with the path of local SubQuery project as arguments, "),r("code",[e._v("@subql/node")]),e._v(" will handle the rest.")])]),e._v(" "),r("h4",{attrs:{id:"step-3-run-a-query-service"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#step-3-run-a-query-service"}},[e._v("#")]),e._v(" Step #3: Run a Query Service")]),e._v(" "),r("p",[e._v("A custom-built graphql query service "),r("code",[e._v("@subql/query")]),e._v(" is designed to interact with the GraphQL API of deployed SubQuery project, querying and viewing the schema.")]),e._v(" "),r("h4",{attrs:{id:"components"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#components"}},[e._v("#")]),e._v(" Components")]),e._v(" "),r("p",[e._v("Npmjs Packages to published:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("@subql/cli")])]),e._v(" "),r("li",[r("code",[e._v("@subql/node")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);