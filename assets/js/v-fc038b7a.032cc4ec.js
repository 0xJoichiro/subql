(self.webpackChunksubql_mono=self.webpackChunksubql_mono||[]).push([[373],{1499:(e,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>s});const s={key:"v-fc038b7a",path:"/run/indexing_query.html",title:"Indexing and Query",lang:"English",frontmatter:{},excerpt:"",headers:[{level:2,title:"Preparation",slug:"preparation",children:[]},{level:2,title:"Start a local SubQuery node",slug:"start-a-local-subquery-node",children:[{level:3,title:"Install it globally",slug:"install-it-globally",children:[]},{level:3,title:"Command-Line",slug:"command-line",children:[{level:4,title:"Point to local project path",slug:"point-to-local-project-path",children:[]},{level:4,title:"Connect to database",slug:"connect-to-database",children:[]},{level:4,title:"Specify a configuration file",slug:"specify-a-configuration-file",children:[]},{level:4,title:"Change the block fetching batch size",slug:"change-the-block-fetching-batch-size",children:[]},{level:4,title:"Local mode",slug:"local-mode",children:[]}]}]},{level:2,title:"Query",slug:"query",children:[{level:3,title:"Install @subql/query globally",slug:"install-subql-query-globally",children:[]},{level:3,title:"Run the query service",slug:"run-the-query-service",children:[]}]}],filePathRelative:"run/indexing_query.md",git:{updatedTime:162007954e4,contributors:[]}}},8375:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>T});var s=a(6252);const l=(0,s.Wm)("h1",{id:"indexing-and-query"},[(0,s.Wm)("a",{class:"header-anchor",href:"#indexing-and-query"},"#"),(0,s.Uk)(" Indexing and Query")],-1),t=(0,s.Wm)("p",null,"In this chapter, we will introduce how to index a configured SubQuery. There are two approaches:",-1),r=(0,s.Uk)("We support "),o={href:"https://www.subquery.network/",target:"_blank",rel:"noopener noreferrer"},i=(0,s.Uk)("hosted service"),c=(0,s.Uk)("(coming soon) for the SubQuery node."),u=(0,s.Wm)("li",null,[(0,s.Wm)("p",null,"Running a SubQuery node for local development")],-1),p=(0,s.Uk)("An alternative indexing solution with "),d=(0,s.Wm)("strong",null,"docker",-1),h=(0,s.Uk)(" is provided in the "),b=(0,s.Uk)("Quick start"),m=(0,s.Uk)(" chapter."),g=(0,s.Wm)("h2",{id:"preparation"},[(0,s.Wm)("a",{class:"header-anchor",href:"#preparation"},"#"),(0,s.Uk)(" Preparation")],-1),y={href:"https://www.postgresql.org/",target:"_blank",rel:"noopener noreferrer"},f=(0,s.Uk)("Postgres"),k=(0,s.Uk)(" database 12 or higher. As after "),v=(0,s.Wm)("a",{href:"#start-a-local-subquery-node"},"SubQuery node",-1),q=(0,s.Uk)(" indexing the blockchain, extracted data need to store in in an external database instance."),x=(0,s.uE)('<h2 id="start-a-local-subquery-node"><a class="header-anchor" href="#start-a-local-subquery-node">#</a> Start a local SubQuery node</h2><p>SubQuery node is an implementation that extract substrate-based blockchain data which designated from a SubQuery project, and update it into a Postgres database.</p><h3 id="install-it-globally"><a class="header-anchor" href="#install-it-globally">#</a> Install it globally</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Yarn</span>\n<span class="token function">yarn</span> global <span class="token function">add</span> @subql/node\n\n<span class="token comment"># NPM</span>\n<span class="token function">npm</span> <span class="token function">install</span> -g @subql/node\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Once installation completed, you can execute it.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>subql-node <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="command-line"><a class="header-anchor" href="#command-line">#</a> Command-Line</h3><p>The following crucial commands will assist you to complete the configuration of SubQuery node and begin indexing. To find out more available option, run <code>--help</code>.</p><h4 id="point-to-local-project-path"><a class="header-anchor" href="#point-to-local-project-path">#</a> Point to local project path</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>subql-node -f your-project-path \nsubql-node -f your-project-tar.tgz\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',10),w=(0,s.Uk)("The acceptable project path can be either a directory or "),W=(0,s.Uk)("packed project"),S=(0,s.Uk)("."),j=(0,s.uE)('<h4 id="connect-to-database"><a class="header-anchor" href="#connect-to-database">#</a> Connect to database</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>export DB_USER=postgres \nexport DB_PASS=postgres \nexport DB_DATABASE=postgres \nexport DB_HOST=localhost \nexport DB_POST=5432\nsubql-node -f your-project-path \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Depend on the setup configuration of your Postgres database, e.g. a different database password, to make sure the query node able to establish connection to it, it will be mandatory to pass correct environment variables within the command.</p><h4 id="specify-a-configuration-file"><a class="header-anchor" href="#specify-a-configuration-file">#</a> Specify a configuration file</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>subql-node -c your-project-config.yml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This will point the query node to a configure file which can be in YAML or JSON format, check out the example below.</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">subquery</span><span class="token punctuation">:</span> ../../../../subql<span class="token punctuation">-</span>example/extrinsics\n<span class="token key atrule">subqueryName</span><span class="token punctuation">:</span> extrinsics\nbatchSize<span class="token punctuation">:</span><span class="token number">100</span>\nlocalMode<span class="token punctuation">:</span><span class="token boolean important">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="change-the-block-fetching-batch-size"><a class="header-anchor" href="#change-the-block-fetching-batch-size">#</a> Change the block fetching batch size</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>subql-node -f your-project-path --batch-size 200\n\nResult:\n[IndexerManager] fetch block [203, 402]\n[IndexerManager] fetch block [403, 602]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>While indexer is idle and waiting data to process, fetch single block per time will significantly drawback the query node performance. Therefore, increasing the batch-size to adjust the number of blocks fetch per time and increasing the preload will enhance the overall processing time. Currently default batch-size been set to 100.</p><h4 id="local-mode"><a class="header-anchor" href="#local-mode">#</a> Local mode</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>subql-node -f your-project-path --local\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>For the development debugging purpose, user can run the node in local mode. Switch to local model will create tables in default schema <code>public</code>.</p><p>If not using local mode, it will create a new schema with the initial <code>subquery_ </code> and corresponding project tables.</p><h2 id="query"><a class="header-anchor" href="#query">#</a> Query</h2><h3 id="install-subql-query-globally"><a class="header-anchor" href="#install-subql-query-globally">#</a> Install @subql/query globally</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Yarn</span>\n<span class="token function">yarn</span> global <span class="token function">add</span> @subql/query\n\n<span class="token comment"># NPM</span>\n<span class="token function">npm</span> <span class="token function">install</span> -g @subql/query\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="run-the-query-service"><a class="header-anchor" href="#run-the-query-service">#</a> Run the query service</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>export DB_HOST=localhost\nsubql-query --name &lt;project_name&gt; --playground\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',19),U=(0,s.Uk)("Make sure the project name is same as you defined at the beginning when "),_=(0,s.Uk)("initialize the project"),Q=(0,s.Uk)(". Also check the environment variables are correct."),P=(0,s.Wm)("p",null,[(0,s.Uk)("After running subql-query service successfully, open your browser and head to "),(0,s.Wm)("code",null,"http://localhost:3000"),(0,s.Uk)(".")],-1),z=(0,s.Wm)("p",null,"Finally, you should see a GraphQL playground showing in the Explorer and the schema that is ready to query.",-1),T={render:function(e,n){const a=(0,s.up)("OutboundLink"),T=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.j4)(s.HY,null,[l,t,(0,s.Wm)("ul",null,[(0,s.Wm)("li",null,[(0,s.Wm)("p",null,[r,(0,s.Wm)("a",o,[i,(0,s.Wm)(a)]),c])]),u]),(0,s.Wm)("p",null,[p,d,h,(0,s.Wm)(T,{to:"/quickstart.html#index-and-query"},{default:(0,s.w5)((()=>[b])),_:1}),m]),g,(0,s.Wm)("ul",null,[(0,s.Wm)("li",null,[(0,s.Wm)("a",y,[f,(0,s.Wm)(a)]),k,v,q])]),x,(0,s.Wm)("p",null,[w,(0,s.Wm)(T,{to:"/create/define_a_subquery.html#pack"},{default:(0,s.w5)((()=>[W])),_:1}),S]),j,(0,s.Wm)("p",null,[U,(0,s.Wm)(T,{to:"/quickstart.html#initialise-the-starter-subquery-project"},{default:(0,s.w5)((()=>[_])),_:1}),Q]),P,z],64)}}}}]);