(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{916:function(e,s,t){"use strict";t.r(s);var a=t(1),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"hello-world-注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hello-world-注解"}},[e._v("#")]),e._v(" Hello World 注解")]),e._v(" "),t("p",[e._v("在 "),t("RouterLink",{attrs:{to:"/zh/quickstart/helloworld-localhost.html"}},[e._v("Hello World quick start guide")]),e._v("中，我们运行了一些简单的命令，并很快就启动并运行了一个示例。 这使您可以确保具备所有先决条件，并且可以使用本地 Playground 进行简单查询以从 SubQuery 获取您的第一个数据。 让我们来仔细看看所有这些命令的含义。")],1),e._v(" "),t("h2",{attrs:{id:"subql-init"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#subql-init"}},[e._v("#")]),e._v(" subql init")]),e._v(" "),t("p",[e._v("我们运行的第一个命令是 "),t("code",[e._v("subql init --starter subqlHelloWorld")]),e._v("。")]),e._v(" "),t("p",[e._v("这个指令完成了繁重的工作，并为您创建了一大堆文件。 正如 "),t("RouterLink",{attrs:{to:"/zh/quickstart/quickstart.html#configure-and-build-the-starter-project"}},[e._v("official documentation")]),e._v("中所指出的那样，您将主要处理以下文件：")],1),e._v(" "),t("ul",[t("li",[t("code",[e._v("project.yaml")]),e._v("中的清单")]),e._v(" "),t("li",[t("code",[e._v("schema.graphql")]),e._v("中的 GraphQL 架构")]),e._v(" "),t("li",[t("code",[e._v("src/mappings/")]),e._v(" 目录中的映射函数")])]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/main_subql_files.png",alt:"key subql files"}})]),e._v(" "),t("p",[e._v("这些文件是我们所做一切的核心。 因此，我们将在另一篇文章中花更多时间来介绍这些文件。 不过现在，只需要知道这样的模式包含了用户可以从 SubQuery API 请求的数据的描述，project yaml 文件包含了“配置”类型参数，当然还有包含了含有 typescript 的 mappingHandlers — 其 typescript 有转换数据的功能。")]),e._v(" "),t("h2",{attrs:{id:"yarn-install"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yarn-install"}},[e._v("#")]),e._v(" yarn install")]),e._v(" "),t("p",[e._v("我们所做的下一个事情是 "),t("code",[e._v("yarn install")]),e._v("。 您也可以使用 "),t("code",[e._v("npm install")]),e._v(" 。")]),e._v(" "),t("blockquote",[t("p",[e._v("一段简短的历史。 Node Package Manager 或 npm 最初于 2010 年发布，是 JavaScript 开发人员中非常流行的包管理器。 它是您在系统上安装 Node.js 时自动安装的默认包。 Yarn 最初由 Facebook 于 2016 年发布，旨在解决使用 npm（当时）的一些性能和安全缺陷。")])]),e._v(" "),t("p",[e._v("yarn 所做的是查看 "),t("code",[e._v("package.json")]),e._v(" 文件并下载各种其他依赖项。 package.json 文件看起来没有很多依赖项，但是当您运行该命令时，您会注意到添加了 18,983 个文件。 这是因为每个依赖项也将有自己的依赖项。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/dependencies.png",alt:"key subql files"}})]),e._v(" "),t("h2",{attrs:{id:"yarn-codegen"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yarn-codegen"}},[e._v("#")]),e._v(" yarn codegen")]),e._v(" "),t("p",[e._v("然后我们运行 "),t("code",[e._v("yarn codegen")]),e._v(" 或 "),t("code",[e._v("npm run-script codegen")]),e._v("。 这样做是为了获取 GraphQL 架构（在"),t("code",[e._v("schema.graphql")]),e._v("中）并生成相关的 typescript 模型文件（因此输出文件将具有 .ts 扩展名）。 您不应该更改这些生成的文件中的任何一个，只能更改源 "),t("code",[e._v("schema.graphql")]),e._v(" 文件。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/typescript.png",alt:"key subql files"}})]),e._v(" "),t("h2",{attrs:{id:"yarn-run-build"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yarn-run-build"}},[e._v("#")]),e._v(" yarn run build")]),e._v(" "),t("p",[e._v("然后执行"),t("code",[e._v("yarn build")]),e._v(" or "),t("code",[e._v("npm run-script build")]),e._v(" 。 这对于经验丰富的程序员来说应该很熟悉。 它创建一个分发文件夹，执行如准备部署的代码优化之类的事情。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/distribution_folder.png",alt:"key subql files"}})]),e._v(" "),t("h2",{attrs:{id:"docker-compose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[e._v("#")]),e._v(" docker-compose")]),e._v(" "),t("p",[e._v("最后一步是组合 docker 命令 "),t("code",[e._v("docker-compose pra && docker-compose up")]),e._v(" (也可以单独运行)。 "),t("code",[e._v("pull")]),e._v("命令从 Docker Hub 获取所有需要的图像， "),t("code",[e._v("up")]),e._v("命令启动容器。")]),e._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" docker-compose pull\nPulling postgres        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\nPulling subquery-node   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\nPulling graphql-engine  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("当容器启动时，您会看到终端吐出大量文本，显示节点和 GraphQL 引擎的状态。 当你看到：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("subquery-node_1   | 2021-06-06T02:04:25.490Z <fetch> INFO fetch block [1, 100]\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("您就知道SubQuery节点已经开始同步。")]),e._v(" "),t("h2",{attrs:{id:"概括"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概括"}},[e._v("#")]),e._v(" 概括")]),e._v(" "),t("p",[e._v("现在您已经了解了幕后发生的事情，问题是接下来该做什么？ 如果您有信心，可以开始学习 "),t("RouterLink",{attrs:{to:"/zh/create/introduction.html"}},[e._v("create a project")]),e._v("并详细了解三个关键文件。 清单文件、GraphQL架构和映射文件。")],1),e._v(" "),t("p",[e._v("或者您可以继续我们的教程部分，我们将学习如何在 SubQuery 的托管基础架构上运行这个 Hello World 示例，我们将学习如何修改 start 块，我们将运行随时可用的开源项目来更深入地了解如何运行 SubQuery 项目。")])])}),[],!1,null,null,null);s.default=r.exports}}]);