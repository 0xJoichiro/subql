(window.webpackJsonp=window.webpackJsonp||[]).push([[202],{762:function(e,s,a){"use strict";a.r(s);var t=a(1),r=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"อธิบาย-hello-world"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#อธิบาย-hello-world"}},[e._v("#")]),e._v(" อธิบาย Hello World")]),e._v(" "),a("p",[e._v("ใน "),a("RouterLink",{attrs:{to:"/th/quickstart/helloworld-localhost.html"}},[e._v("คู่มือเริ่มต้นฉบับย่อของ Hello World")]),e._v(" เราได้ใช้คำสั่งง่ายๆ และได้รับตัวอย่างแบบเร็วๆ วิธีนี้ช่วยให้คุณมั่นใจได้ว่าคุณมีข้อกำหนดเบื้องต้นทั้งหมดแล้ว และสามารถใช้ Playground ภายในเครื่องสำหรับ query อย่างง่าย เพื่อรับข้อมูลแรกของคุณจาก SubQuery ในที่นี้ เราจะพิจารณาให้ละเอียดยิ่งขึ้นว่าคำสั่งเหล่านั้นหมายถึงอะไร")],1),e._v(" "),a("h2",{attrs:{id:"subql-init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subql-init"}},[e._v("#")]),e._v(" subql init")]),e._v(" "),a("p",[e._v("คำสั่งแรกที่เราเรียกใช้คือ "),a("code",[e._v("subql init --starter subqlHelloWorld")])]),e._v(" "),a("p",[e._v("สิ่งนี้ช่วยจัดการส่วนงานที่หนัก และสร้างไฟล์ทั้งหมดให้คุณ ตามที่ระบุไว้ใน "),a("RouterLink",{attrs:{to:"/th/quickstart/quickstart.html#configure-and-build-the-starter-project"}},[e._v("เอกสารอย่างเป็นทางการ")]),e._v(" คุณจะต้องทำงานกับไฟล์ต่อไปนี้เป็นหลัก:")],1),e._v(" "),a("ul",[a("li",[e._v("Manifest ใน "),a("code",[e._v("project.yaml")])]),e._v(" "),a("li",[e._v("GraphQL Schema ใน "),a("code",[e._v("schema.graphql")])]),e._v(" "),a("li",[e._v("Mapping functions ในไดเรกทอรี "),a("code",[e._v("src/mappings/")])])]),e._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/main_subql_files.png",alt:"ไฟล์ key subql"}})]),e._v(" "),a("p",[e._v('ไฟล์เหล่านี้เป็นส่วนหลักของทุกสิ่งที่เราทำ ดังนั้น เราจะจัดสรรเวลาให้กับไฟล์เหล่านี้มากขึ้นในบทความอื่นๆ ในตอนนี้ ให้รู้ว่า schema ประกอบด้วยคำอธิบายของข้อมูลที่ผู้ใช้สามารถ request ได้จาก SubQuery API, ไฟล์ yaml ของโครงการซึ่งมีพารามิเตอร์ประเภท "configuration" และแน่นอนว่ามี mappingHandlers ที่มี typescript ซึ่งมีฟังก์ชันสำหรับแปลงข้อมูล')]),e._v(" "),a("h2",{attrs:{id:"yarn-install"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yarn-install"}},[e._v("#")]),e._v(" yarn install")]),e._v(" "),a("p",[e._v("สิ่งต่อไปที่เราทำคือ "),a("code",[e._v("yarn install")]),e._v(" "),a("code",[e._v("npm install")]),e._v(" ก็สามารถใช้ได้เช่นกัน")]),e._v(" "),a("blockquote",[a("p",[e._v("สรุปเรื่องราวความเป็นมาแบบสั้นๆ Node Package Manager หรือ npm เปิดตัวครั้งแรกในปี 2010 และเป็นตัวจัดการแพ็คเกจที่ได้รับความนิยมอย่างมากในหมู่นักพัฒนา JavaScript ซี่งมันเป็นแพ็คเกจเริ่มต้นที่ติดตั้งโดยอัตโนมัติทุกครั้งที่คุณติดตั้ง Node.js บนระบบของคุณ Yarn เปิดตัวครั้งแรกโดย Facebook ในปี 2559 โดยมีจุดประสงค์เพื่อแก้ไขข้อบกพร่องด้านประสิทธิภาพและความปลอดภัยบางประการในการทำงานกับ npm (ในขณะนั้น)")])]),e._v(" "),a("p",[e._v("สิ่งที่ yarn ทำคือดูที่ไฟล์ "),a("code",[e._v("package.json")]),e._v(" และดาวน์โหลด dependencies อื่นๆ เมื่อดูที่ไฟล์ "),a("code",[e._v("package.json")]),e._v(" ดูเหมือนว่าจะไม่ได้มี dependencies มากนัก แต่เมื่อคุณเรียกใช้คำสั่ง คุณจะสังเกตเห็นว่ามีการเพิ่มไฟล์เข้ามา 18,983 ไฟล์ เนื่องจากแต่ละ dependency จะมี dependencies ของตนเองด้วย")]),e._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/dependencies.png",alt:"ไฟล์ key subql"}})]),e._v(" "),a("h2",{attrs:{id:"yarn-codegen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yarn-codegen"}},[e._v("#")]),e._v(" yarn codegen")]),e._v(" "),a("p",[e._v("จากนั้นเราก็รัน "),a("code",[e._v("yarn codegen")]),e._v(" หรือ "),a("code",[e._v("npm run-script codegen")]),e._v(" สิ่งนี้เป็นการดึง schema ของ GraphQL (ใน "),a("code",[e._v("schema.graphql")]),e._v(") และสร้างไฟล์โมเดล typescript ที่เกี่ยวข้อง (ดังนั้น ไฟล์เอาต์พุตจะเป็นสกุล .ts) คุณไม่ควรเปลี่ยนไฟล์ที่สร้างขึ้นเหล่านี้ เพียงเปลี่ยนไฟล์ต้นทาง "),a("code",[e._v("schema.graphql")])]),e._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/typescript.png",alt:"ไฟล์ key subql"}})]),e._v(" "),a("h2",{attrs:{id:"yarn-build"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yarn-build"}},[e._v("#")]),e._v(" yarn build")]),e._v(" "),a("p",[e._v("จากนั้นรันคำสั่ง "),a("code",[e._v("yarn build")]),e._v(" หรือ "),a("code",[e._v("npm run-script build")]),e._v(" สิ่งนี้น่าจะเรื่องที่คุ้นเคยสำหรับโปรแกรมเมอร์ที่มีประสบการณ์ ซึ่งเป็นการสร้างโฟลเดอร์แบบกระจาย (distribution folder) สำหรับทำสิ่งต่างๆ เช่นการเพิ่มประสิทธิภาพโค้ดที่เตรียมสำหรับการ deploy")]),e._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/distribution_folder.png",alt:"ไฟล์ key subql"}})]),e._v(" "),a("h2",{attrs:{id:"docker-compose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[e._v("#")]),e._v(" docker-compose")]),e._v(" "),a("p",[e._v("ขั้นตอนสุดท้ายคือการรวมคำสั่ง docker "),a("code",[e._v("docker-compose pull && docker-compose up")]),e._v(" (สามารถเรียกใช้แยกกันได้) คำสั่ง "),a("code",[e._v("pull")]),e._v(" จะดึงอิมเมจที่จำเป็นทั้งหมดจาก Docker Hub และคำสั่ง "),a("code",[e._v("up")]),e._v(" จะเริ่มต้นการทำงานของคอนเทนเนอร์")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" docker-compose pull\nPulling postgres        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(". "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\nPulling subquery-node   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(". "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\nPulling graphql-engine  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(". "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("เมื่อคอนเทนเนอร์เริ่มทำงาน คุณจะเห็นเทอร์มินัลแสดงข้อความจำนวนมากที่แสดงสถานะของโหนดและ GraphQL engine และเมื่อคุณเห็น:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("subquery-node_1   | 2021-06-06T02:04:25.490Z <fetch> INFO fetch block [1, 100]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("เป็นการบอกให้คุณรู้ว่าโหนด SubQuery ได้เริ่มการซิงโครไนซ์แล้ว")]),e._v(" "),a("h2",{attrs:{id:"สรุป"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#สรุป"}},[e._v("#")]),e._v(" สรุป")]),e._v(" "),a("p",[e._v("เมื่อคุณได้ทราบข้อมูลเชิงลึกเกี่ยวกับสิ่งที่เกิดขึ้นเบื้องหลังแล้ว คำถามก็คือ จะต้องดูที่ไหนต่อ? หากคุณรู้สึกมั่นใจ คุณสามารถเรียนรู้เกี่ยวกับวิธีการ"),a("RouterLink",{attrs:{to:"/th/create/introduction.html"}},[e._v("สร้างโปรเจ็กต์")]),e._v("และเรียนรู้เพิ่มเติมเกี่ยวกับไฟล์หลักสามไฟล์ นั่นคือ ไฟล์ manifest, the GraphQL schema, และ ไฟล์ the mappings")],1),e._v(" "),a("p",[e._v("นอกจากนี้ สามารถไปที่บทช่วยสอนของเรา ซึ่งจะดูว่าเราสามารถเรียกใช้ตัวอย่าง Hello World นี้บนโครงสร้างพื้นฐานที่โฮสต์บน SubQuery ได้อย่างไร เราจะดูการแก้ไขบล็อกเริ่มต้น และเราจะเจาะลึกถึงการรันโปรเจ็กต์ SubQuery โดยเรียกใช้จากสิ่งที่พร้อมใช้งาน และโปรเจ็กต์โอเพ่นซอร์สต่างๆ")])])}),[],!1,null,null,null);s.default=r.exports}}]);